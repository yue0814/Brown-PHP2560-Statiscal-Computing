grepl(a,b)
b <- "[^14$]"
grepl(a,b)
b <- "14"
grepl(a,b)
b <- "[14]"
grepl(a,b)
b <- paste("14")
grepl(a,b)
b <- paste("[14]")
grepl(a,b)
b <- paste("14")
grepl(a,b)
b <- paste("14")
grepl(a,b)
b <- paste("[1]{1}[4]{1}")
grepl(a,b)
grepl(a,patterm = b)
grepl(a,pattern = b)
a <- c(14,144,114)
grepl(a,pattern = b)
b <- paste("[14]")
grepl(a,pattern = b)
b <- paste("^[14]$")
grepl(a,pattern = b)
b <- paste("[14]$")
grepl(a,pattern = b)
b <- paste("^[14]")
grepl(a,pattern = b)
b <- paste("^14$")
grepl(a,pattern = b)
for (i in c("fc60_","maxvO2_","_drnkwek"){
refuse.donknow<- paste"^99900$"
grepl(brfss.2015$i,pattern = refuse.donknow)
}
for (i in c("fc60_","maxvO2_","_drnkwek")){
refuse.donknow<- paste"^99900$"
grepl(brfss.2015$i,pattern = refuse.donknow)
}
names(brfss.2015) <- tolower(brfss.name)
for (i in c("fc60_","maxvO2_","drnkwek")){
refuse.donknow<- paste"^99900$"
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
}
for (i in c("fc60_","maxvO2_","drnkwek")){
refuse.donknow<- paste("^99900$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
brfss.2015[,i][have.which] <- NA
}
i
for (i in c("fc60_","maxvO2_","drnkwek")){
refuse.donknow<- paste("^99900$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
brfss.2015[,i][have.which] <- NA
}
i
for (i in c("fc60_","maxvo2_","drnkwek")){
refuse.donknow<- paste("^99900$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
brfss.2015[,i][have.which] <- NA
}
paste("^98$|^99$")
b <- paste("^98$|^99$")
a <- c(98,988,99,999)
grepl(a,pattern = b)
for (i in c("scntwrk1","scntlwk1")){
refuse.donknow<- paste("^97$|^99$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
brfss.2015$i[have.which] <- NA
}
i
have.which
brfss.2015$scntwrk1
for (i in c("asthmage","aseruist","asdruist","asrchkup")){
refuse.donknow<- paste("^98$|^99$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
brfss.2015$i[have.which] <- NA
}
i
brfss.2015$asthmage
for (i in c("asthmage","aseruist","asdruist","asrchkup")){
refuse.donknow<- paste("^98$|^99$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
for (i in c("scntwrk1","scntlwk1")){
refuse.donknow<- paste("^97$|^99$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
tolower(c("PAFREQ2_","PAFREQ1_","STRFREQ_"))
for (i in c("ageg5yr")){
refuse.donknow<- paste("^14$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
# 3 = Don’t know/Not Sure/Refused
refuse.donknow<- paste("^900$")
have.which <- grepl(brfss.2015$age65yr,pattern = refuse.donknow)
brfss.2015$age65yr[have.which] <- NA
for (i in c("pafreq2_","pafreq1_","strfreq_")){
refuse.donknow<- paste("^99000$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
?apply
?stopifnot
refuse.donknow<- paste("^900$")
have.which <- grepl(brfss.2015$age65yr,pattern = refuse.donknow)
brfss.2015$age65yr[have.which] <- NA
library(foreign)
# This is where mine is stored, you will have to change in for yours.
brfss.2015 <- read.xport("/Users/ludanzhang/Documents/brown/statistical computing I/LLCP2015.xpt")
remove all
head(brfss.2015)
brfss.name <- names(brfss.2015)
name.X <- paste("X_[A-z0-9]+")
have.X <- grepl(brfss.name,pattern = name.X)
brfss.name[have.X] = gsub("X_","",brfss.name[have.X])
names(brfss.2015) <- tolower(brfss.name)
#exclude some sprcial cases. First, deal with the cases where 7,77,777,7777,77777,777777,9,99,999,9999,99999,999999 equal to don't know or refuse to answer
first.to.exclude <- c("QSTLANG","DUALUSE","PA1VIGM_","PAVIG21_","PAVIG11_","PA1MIN_","PAMIN21_","PAMIN11_","ASTHMAGE","ASERUIST","ASDRUIST","ASRCHKUP","PCDMDECN","SCNTWRK1","SCNTLWK1","STRFREQ_","_MINAC21","_MINAC11","PAFREQ2_","PAFREQ1_","FC60_","MAXVO2_","_DRNKWEK","DROCDY3_","HTM4","_AGE80","_AGE65YR","_AGEG5YR")
num.first.to.exclude <- c(1:length(first.to.exclude))
for (i in length(first.to.exclude)) {
num.first.to.exclude <- c(num.first.to.exclude, which(brfss.name == first.to.exclude[i]))
}
for (i in 25:dim(brfss.2015)[2]) {
if (!sum(i == num.first.to.exclude)) {
num.second.to.exclude <- c()
refuse.donknow.6 <- "[7]{6}|[9]{6}"
have <- data.frame(grepl(brfss.2015[,i],pattern = refuse.donknow.6))
refuse.donknow.5 <- "[7]{5}|[9]{5}"
have <- data.frame(have,grepl(brfss.2015[,i],pattern = refuse.donknow.5))
refuse.donknow.4 <- "[7]{4}|[9]{4}"
have <- data.frame(have,grepl(brfss.2015[,i],pattern = refuse.donknow.4))
refuse.donknow.3 <- "[7]{3}|[9]{3}"
have <- data.frame(have,grepl(brfss.2015[,i],pattern = refuse.donknow.3))
refuse.donknow.2 <- "[7]{2}|[9]{2}"
have <- data.frame(have,grepl(brfss.2015[,i],pattern = refuse.donknow.2))
refuse.donknow.1 <- "[7]{1}|[9]{1}"
have <- data.frame(have,grepl(brfss.2015[,i],pattern = refuse.donknow.1))
have.sum <- colSums(have)
for (j in 1:6) {
if (have.sum[j] == 0) {
j = j + 1
} else {
have.which <- have[,j]
break
}
}
brfss.2015[,i][have.which] <- NA
}
}
# 99000 = Don’t know/Not Sure/Refused/Missing
for (i in c("pafreq2_","pafreq1_","strfreq_")){
refuse.donknow<- paste("^99000$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
# 99900 = Don’t know/Not Sure/Refused
for (i in c("fc60_","maxvo2_","drnkwek")){
refuse.donknow<- paste("^99900$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
# 900 = Don’t know/Not Sure/Refused/Missing
refuse.donknow<- paste("^900$")
have.which <- grepl(brfss.2015$drocdy3_,pattern = refuse.donknow)
brfss.2015$drocdy3_[have.which] <- NA
# 98,99 = Don’t know/Not Sure/Refused
for (i in c("asthmage","aseruist","asdruist","asrchkup")){
refuse.donknow<- paste("^98$|^99$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
# 97,99 = Don’t know/Not Sure/Refused
for (i in c("scntwrk1","scntlwk1")){
refuse.donknow<- paste("^97$|^99$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
# 14 = Don’t know/Not Sure/Refused
for (i in c("ageg5yr")){
refuse.donknow<- paste("^14$")
have.which <- grepl(brfss.2015$i,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$i[have.which] <- NA
}
}
# 3 = Don’t know/Not Sure/Refused
refuse.donknow<- paste("^3$")
have.which <- grepl(brfss.2015$age65yr,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$age65yr[have.which] <- NA
}
brfss.2015
head(brfss.2015)
a <- c(77.777777,777777)
refuse.donknow.6 <- "^[7]{6}$|^[9]{6}$"
have <- data.frame(grepl(a,pattern = refuse.donknow.6))
have
a <- c(77.777777,777777,999999)
refuse.donknow.6 <- "^[7]{6}$|^[9]{6}$"
have <- data.frame(grepl(a,pattern = refuse.donknow.6))
have
library(foreign)
# This is where mine is stored, you will have to change in for yours.
brfss.2015 <- read.xport("/Users/ludanzhang/Documents/brown/statistical computing I/LLCP2015.xpt")
brfss.name <- names(brfss.2015)
name.X <- paste("X_[A-z0-9]+")
have.X <- grep(brfss.name, pattern = name.X)
brfss.name[have.X] = gsub("X_", "", brfss.name[have.X])
names(brfss.2015) <- brfss.name
brfss.2015[1,]
names(brfss.2015) <- tolower(brfss.name)
brfss.2015[1,]
refuse.donknow<- paste("^7$|^9$")
have.which <- grepl(brfss.2015$pcdmdecn,pattern = refuse.donknow)
if (sum(have.which)) {
brfss.2015$pcdmdecn[have.which] <- NA
}
A <- c(0.00800	-0.00200	0.00400
-0.00200	0.00200	-0.00200
0.00400	-0.00200	0.00800)
A <- c(0.00800	-0.00200	0.00400 -0.00200	0.00200	-0.00200 0.00400	-0.00200	0.00800)
A <- c(0.00800,-0.00200,0.00400,-0.00200,0.00200,-0.00200,0.00400,-0.00200,0.00800)
A <- matrix(A,ncol=3,byrow = TRUE)
inv(A)
？solve
?solve
solve(A)
B <- c(5,1,3)
B*solve(A)
B％*％solve(A)
B%*%solve(A)
library(RMySQL)
library(RMySQL)
con2 <- dbConnect(MySQL(),
user = 'trial',
password = 'password',
host = '127.0.0.1',
dbname='titanic')
install.packages(RMySQL)
install.packages("RMySQL")
library(RMySQL)
con2 <- dbConnect(MySQL(),
user = 'trial',
password = 'password',
host = '127.0.0.1',
dbname='titanic')
test_data <- data.frame( var0 = 100 + c(0, cumsum(runif(49, -20, 20))), var1 = 150 + c(0, cumsum(runif(49, -10, 10))), date = seq.Date(as.Date("2002-01-01"), by="1 month", length.out=100))
require("reshape") require("ggplot2") test_data_long <- melt(test_data, id="date")
test_data_long <- melt(test_data, id="date")
test_data
rbinom
?rbinom
pbinom(12,15,1/2)
dbinom(12,15,1/2)
1-pbinum(12,15,1/2)
1-pbinom(12,15,1/2)
1-(pbinom(11,15,1/2))
dbinom(12,15,1/2) + dbinom(13,15,1/2) + dbinom(14,15,1/2) + dbinom(15,15,1/2)
1-(pbinom(11,15,1/2))**100
1-(pbinom(14,15,1/2))**100
1-(pbinom(14,15,1/2))**100
1-(pbinom(14,15,1/2))
2/3
1-(pbinom(9,10,1/2))**20
1-(pbinom(13,15,1/2))**100
?ldply
install.packages("plyr")
install.packages("XML")
install.packages("RCurl")
library(XML)
library(RCurl)
url <- "https://en.wikipedia.org/wiki/Body_mass_index"
urldata <-getURL(url)
data <- readHTMLTable(urldata,which = 2)
data <- readHTMLTable(urldata)
data
install.packages("rvest")
?html_session
library(rvest)
install.packages("xml")
?html_session
?html_form
session1 <- submit_form(session,filled_form)
query <- "data science"
loc <- "Providence"
session <- html_session("http://www.indeed.com")
form <- html_form(session)[[1]]
filled_form <- set_values(form, q = query, l = loc)
session
cat(session)
session
form
filled_form
session1 <- submit_form(session,filled_form)
session1 <- submit_form(session,filled_form)
session1
?html_session
?html_nodes
session$url
?html_attr
salary_links <- session1 %>%
html_nodes(css = "#resultsCol li:nth-child(2) a") %>%
html_attr("href")
salary_links
salary_links <- paste(session$url, salary_links, sep = '')
salary_links <- paste(session$url, salary_links, sep = '')
salary_links
salary_links <- session1 %>%
html_nodes(css = "#resultsCol li:nth-child(2) a") %>%
html_attr("href")
salary_links <- paste(session$url, salary_links, sep = '')
salary_links
?read_html
read_html(salary_links[1],html_nodes("#salary_display_table .salary"),html_text())
salary_links[1]
read_html(salary_links[1],html_nodes(salary_links[1], "#salary_display_table .salary"),html_text(salary_links[1]))
read_html(salary_links[1],html_nodes(salary_links[1], "#salary_display_table .salary"),html_text())
html_nodes(salary_links[1], "#salary_display_table .salary")
salaries <- lapply(salary_links, . %>%
read_html() %>%
html_nodes("#salary_display_table .salary") %>%
html_text())
read_html(salary_links[1],html_nodes("#salary_display_table .salary",html_text()))
read_html(salary_links[1],html_nodes("#salary_display_table .salary",html_text(salary_links[1])))
?html_nodes
html_text(html_nodes(read_html(salary_links[1]), "#salary_display_table .salary"))
html_nodes(read_html(salary_links[1]), "#salary_display_table .salary")
?html_text
install.packages("RMySQL")
install.packages("DBI")
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(),
user = 'lzphp2560'
password = .rs.askForPassword("password:")
host = "lzphp2560.c9jwjymrpef1.us-east-1.rds.amazonaws.com:3306",
dbname = 'pho2560_data')
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(),
user = 'lzphp2560'
password = .rs.askForPassword("password:"),
host = "lzphp2560.c9jwjymrpef1.us-east-1.rds.amazonaws.com:3306",
dbname = 'php2560_data')
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(),
user = 'lzphp2560'
password = .rs.askForPassword("password:"),
host = "lzphp2560.c9jwjymrpef1.us-east-1.rds.amazonaws.com:3306",
dbname = "php2560_data"")
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(),
user = 'lzphp2560'
password = .rs.askForPassword("password:"),
host = "lzphp2560.c9jwjymrpef1.us-east-1.rds.amazonaws.com:3306",
dbname = "php2560_data")
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(),
user = 'lzphp2560',
password = .rs.askForPassword("password:"),
host = "lzphp2560.c9jwjymrpef1.us-east-1.rds.amazonaws.com:3306",
dbname = "php2560_data")
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(),
user = 'lzphp2560',
password = .rs.askForPassword("password:"),
host = "lzphp2560.c9jwjymrpef1.us-east-1.rds.amazonaws.com:3306",
dbname = "php2560_data")
?html_nodes
salary_links <- session1 %>%
html_nodes(css = "#resultsCol , li , a") %>%
html_attr("href")
salary_links
shiny::runApp('Documents/brown/statistical computing I/FINAL/myAPP')
runApp('Documents/brown/statistical computing I/FINAL/myAPP')
runApp('Documents/brown/statistical computing I/FINAL/myAPP')
runApp('Documents/brown/statistical computing I/FINAL/myAPP')
runApp('Documents/brown/statistical computing I/FINAL/myAPP')
runApp('Documents/brown/statistical computing I/FINAL/myAPP')
library(DBI)
#pre-set before download
library(stringr)
library(rvest)
library(RCurl)
library(XML)
install.packages('pacman')
pacman::p_load(RCurl, foreign, downloader, survey, srvyr, ggplot2, dplyr)
source_url("https://raw.githubusercontent.com/ajdamico/asdfree/master/Download%20Cache/download%20cache.R", prompt=F, echo=F)
setwd("/Users/ludanzhang/Documents/brown/statistical computing I/project 8_Ludan Zhang_Jiachen Zhang_Yue Peng_Kun Meng")
list <- list(NULL)
#download the data from internet
tf <- tempfile(); td <- tempdir()
xpt <- paste("https://kaggle2.blob.core.windows.net/datasets/138/287/imdb-5000-movie-dataset.zip?sv=2015-12-11&sr=b&sig=Bb9Xnax70SbNFQsV%2BJqJhjajCWeSdPTuoAG4g9No5xo%3D&se=2016-12-02T20%3A16%3A00Z&sp=r")
download_cached(xpt, tf, mode='wb')
local.fn <- unzip(tf, exdir = td)
######NOTE:The link for the data may change. If you can't get the data from the link, please use:
######local.fn <- unzip("imdb-5000-movie-dataset.zip")
#store the data
movie_dat <- read.csv(local.fn[[1]])
name <- paste("movie_data.rda")
save(movie_dat, file = paste(name))
# write the data to MonetDBLite
library(DBI)
dbdir <- '/Users/ludanzhang/Documents/brown/statistical computing I/project 8_Ludan Zhang_Jiachen Zhang_Yue Peng_Kun Meng/DBLite'
con <- dbConnect(MonetDBLite::MonetDBLite(), dbdir)
dbWriteTable(con, "movie_dat", movie_dat, overwrite = TRUE)
##STEP2: Clean the data
# Remove all the data of TV series
query <- "SELECT * FROM movie_dat where content_rating NOT LIKE 'TV%' "
movie_data <- dbGetQuery(con,query)
# trim whitespace
library(stringr)
movie_data$movie_title <- str_trim(movie_data$movie_title)
dbWriteTable(con,"movie_data",movie_data,overwrite = TRUE)
#Delete the repeat movies
movie_data <- movie_data[-which(duplicated(movie_data$movie_imdb_link, fromLast = TRUE)),]
#Complete the missing informaion
#scrap new information from internet
url <- read_html("http://www.the-numbers.com/movie/budgets/all")
table  <- html_table(html_nodes(url, "table"), fill = TRUE)
table <- data.frame(table)
table <- table[seq(1,dim(table)[1],2),]
#put the new data into the right form
table$Production.Budget <- as.numeric(gsub(",","",str_sub(table$Production.Budget,2,-1)))
table$Worldwide.Gross <- as.numeric(gsub(",","",str_sub(table$Worldwide.Gross,2,-1)))
table$year <- as.numeric(str_sub(table$Release.Date, -4, -1))
table = table[,-1]
#merge the new data into the former data
for (x in table$Movie) {
if (x %in% movie_data$movie_title) {
movie_data$gross[which(movie_data$movie_title == x)] <- table$Worldwide.Gross[min(which(table$Movie == x))]
movie_data$budget[which(movie_data$movie_title == x)] <- table$Production.Budget[min(which(table$Movie == x))]}
}
# save latest data to the MonetDBLite
dbWriteTable(con, "movie_data",movie_data,overwrite = TRUE)
save(movie_data, file = "/Users/ludanzhang/Documents/brown/statistical computing I/project 8/results/movie.rda")
## STEP3: Rearrange data for further use
#rearrange by genre
movie_data_new <- movie_data
movie_genre <- movie_data_new[1,]
temp_genre <- data.frame()
for (i in 1:dim(movie_data[1])) {
genre <- data.frame(as.character(unlist(str_split(movie_data$genres[i],"\\|"))))
n <- dim(genre)[1]
temp_genre <- data.frame(matrix(rep(movie_data_new[i,],n),nrow = n,byrow = TRUE))
names(temp_genre) <- names(movie_data)
temp_genre$genres[1:n] <- as.character(genre[,1])
movie_genre <- rbind(movie_genre,temp_genre)
}
for (i in 1:28) {
movie_genre[,i] <- unlist(movie_genre[,i])
}
movie_genre <- movie_genre[-1,]
dbWriteTable(con, "movie_genre", movie_genre,overwrite = TRUE)
#Seperate keyplot words
kwords <- movie_data$plot_keywords
kwords <- gsub("\\|", ",", kwords)
kword_list <- strsplit(kwords, ",")
get_k1 <- function(i){
kword_list[[i]][1]
}
get_k2 <- function(i){
kword_list[[i]][2]
}
get_k3 <- function(i){
kword_list[[i]][3]
}
get_k4 <- function(i){
kword_list[[i]][4]
}
get_k5 <- function(i){
kword_list[[i]][5]
}
x <- 1:length(kword_list)
kword1 <- sapply(x, get_k1)
kword2 <- sapply(x, get_k2)
kword3 <- sapply(x, get_k3)
kword4 <- sapply(x, get_k4)
kword5 <- sapply(x, get_k5)
movie_keywords <- movie_data
movie_keywords$keyword1 <- kword1
movie_keywords$keyword2 <- kword2
movie_keywords$keyword3 <- kword3
movie_keywords$keyword4 <- kword4
movie_keywords$keyword5 <- kword5
movie_keywords <- subset(movie_keywords, select = -plot_keywords)
dbWriteTable(con, "movie_keywords",movie_keywords,overwrite = TRUE)
install.packages("pacman")
